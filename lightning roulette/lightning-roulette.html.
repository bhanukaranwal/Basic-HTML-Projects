<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Lightning Roulette Simulator</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      font-family: 'Segoe UI', Arial, sans-serif;
      background: linear-gradient(135deg, #232526 0%, #414345 100%);
      margin: 0; padding: 0;
      display: flex; flex-direction: column; align-items: center;
      min-height: 100vh; color: #eee;
    }
    h1 { margin: 30px 0 15px 0; font-size: 2.4rem; letter-spacing: 1px; }
    .game-box {
      background: rgba(30,30,30,0.9); padding: 32px 38px 18px 38px; border-radius: 16px; box-shadow: 0 4px 24px #0008;
      margin-top: 20px;
      min-width: 340px; max-width: 98vw;
    }
    .wheel-canvas {
      display: block;
      margin: 0 auto 18px auto;
      background: #282828;
      border-radius: 50%;
      box-shadow: 0 2px 18px #0006;
    }
    .bet-section { text-align: center; margin: 12px 0; }
    input[type="number"] { width: 70px; font-size: 1rem; border-radius: 6px; padding: 4px 7px; border: none; }
    select { font-size: 1rem; border-radius: 6px; padding: 3px 7px; border: none; }
    button {
      background: #fcbb4a; color: #242424;
      border: none; border-radius: 7px; font-weight: 600;
      padding: 8px 20px; font-size: 1rem; margin: 0 4px; cursor: pointer;
      transition: 0.2s;
    }
    button:hover { background: #ffa500; }
    .result-box, .stats-box {
      margin-top: 17px; font-size: 1.14rem;
      background: #181818; border-radius: 10px; padding: 13px 16px;
      box-shadow: 0 2px 8px #0005;
      text-align: center;
    }
    .highlight { color: #fcbb4a; font-weight: 700; }
    .lightning {
      color: #fff100; font-weight: 700;
      text-shadow: 0 0 6px #fff, 0 0 20px #fff300;
      animation: flash 0.6s linear alternate infinite;
    }
    @keyframes flash {
      0% { text-shadow: 0 0 4px #fff100, 0 0 12px #fffaba; }
      100% { text-shadow: 0 0 12px #fff500, 0 0 28px #ffec80; }
    }
    .footer { margin-top: 30px; opacity: 0.45; font-size: 0.95rem; }
    @media (max-width: 480px) {
      .game-box { padding: 12px 7vw 12px 7vw; }
      .wheel-canvas { width: 86vw !important; height: 86vw !important; }
    }
  </style>
</head>
<body>
  <h1>âš¡ Lightning Roulette Simulator</h1>
  <div class="game-box">
    <canvas id="wheel" class="wheel-canvas" width="300" height="300"></canvas>
    <div class="bet-section">
      <form id="bet-form" autocomplete="off">
        <label>
          Bet on number (0-36):
          <select id="bet-number">
            <!-- generated by JS -->
          </select>
        </label>
        <label>&nbsp;Amount: $
          <input type="number" id="bet-amount" min="1" value="10" required>
        </label>
        <button type="submit">Place Bet</button>
      </form>
      <div>
        <span>Balance: $<span id="balance" class="highlight">500</span></span>
      </div>
    </div>
    <div class="result-box" id="result-box">
      Place your bet!
    </div>
    <div class="stats-box">
      <div>Total Spins: <span id="spins" class="highlight">0</span></div>
      <div>Biggest Win: $<span id="bestwin" class="highlight">0</span></div>
    </div>
  </div>
  <div class="footer">By YourName Â· <b>All code in one HTML file</b></div>
  <script>
    // --------- Globals ---------
    const wheelNumbers = [
      0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30,
      8, 23, 10, 5, 24, 16, 33, 1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26
    ];
    let lightningNums = [], lightningPayouts = [];
    let balance = 500, spins = 0, bestWin = 0;
    const basePayout = 30, lightningOdds = [50, 100, 200, 500];
    let spinning = false;

    // --------- Utility Functions ---------
    function randInt(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    function shuffle(arr) {
      for (let i = arr.length - 1; i > 0; i--) {
        const j = randInt(0, i);
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
    }

    // --------- Setup Select List ---------
    const selNum = document.getElementById('bet-number');
    for (let i = 0; i <= 36; ++i) {
      const opt = document.createElement('option');
      opt.value = i; opt.innerText = i;
      selNum.appendChild(opt);
    }

    // --------- Wheel Drawing ---------
    const canvas = document.getElementById('wheel');
    const ctx = canvas.getContext('2d');
    const cx = canvas.width / 2, cy = canvas.height / 2, R = 136;
    function drawWheel(spinAngle = 0, result = null, highlightLightning = false) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const arc = 2 * Math.PI / 37;
      for (let i = 0; i < 37; ++i) {
        let n = wheelNumbers[i];
        let ang = i * arc + spinAngle;
        // Slice color: green 0, red even, black odd
        let color = n === 0 ? '#26f376' : (n % 2 === 0 ? '#d22' : '#222');
        ctx.beginPath();
        ctx.moveTo(cx, cy);
        ctx.arc(cx, cy, R, ang, ang + arc, false);
        ctx.closePath();
        ctx.fillStyle = n === result ? '#fcbb4a' : color;
        ctx.globalAlpha = (n === result ? 0.9 : 0.88);
        ctx.fill();
        ctx.globalAlpha = 1;
        // Number Text
        ctx.save();
        ctx.translate(cx, cy);
        ctx.rotate(ang + arc / 2);
        ctx.textAlign = 'right';
        ctx.font = n === result ? "bold 20px Segoe UI" : "15px Segoe UI";
        ctx.fillStyle = '#fff';
        ctx.shadowColor = (lightningNums.includes(n) && highlightLightning) ? '#fff600' : '#000';
        ctx.shadowBlur = lightningNums.includes(n) && highlightLightning ? 24 : 6;
        ctx.fillText(n, R - 7, 7);
        ctx.restore();
      }
      // Draw center circle
      ctx.beginPath();
      ctx.arc(cx, cy, 45, 0, 2 * Math.PI);
      ctx.fillStyle = '#282828';
      ctx.shadowColor = '#fcbb4a';
      ctx.shadowBlur = 15;
      ctx.fill();
      ctx.shadowBlur = 0;
      // Draw ball for result
      if (result !== null) {
        let ind = wheelNumbers.indexOf(result);
        let ang = ind * arc + spinAngle + arc / 2;
        let bx = cx + (R - 35) * Math.cos(ang), by = cy + (R - 35) * Math.sin(ang);
        ctx.beginPath();
        ctx.arc(bx, by, 12, 0, 2 * Math.PI);
        ctx.fillStyle = '#f6f6f6';
        ctx.strokeStyle = '#fcbb4a';
        ctx.lineWidth = 3;
        ctx.fill();
        ctx.stroke();
      }
      ctx.shadowBlur = 0;
    }
    drawWheel();

    // --------- Lightning Numbers ---------
    function lightningRound() {
      lightningNums = [];
      let numsPool = [...Array(37).keys()];
      shuffle(numsPool);
      let hits = randInt(1,3); // 1-3 lightning numbers
      for (let i = 0; i < hits; ++i)
        lightningNums.push(numsPool[i]);
      lightningPayouts = lightningNums.map(() => lightningOdds[randInt(0, lightningOdds.length - 1)]);
      return lightningNums;
    }

    // --------- Game Logic ---------
    const resultBox = document.getElementById('result-box');
    const balBox = document.getElementById('balance'), spinsBox = document.getElementById('spins'), bestWinBox = document.getElementById('bestwin');
    let wheelAngle = 0, lastResult = null;
    function updateStats() {
      balBox.textContent = balance;
      spinsBox.textContent = spins;
      bestWinBox.textContent = bestWin;
    }

    // --------- Bet Handling and Animation ---------
    document.getElementById("bet-form").onsubmit = function(evt) {
      evt.preventDefault();
      if (spinning) return;
      let num = parseInt(selNum.value);
      let amt = parseInt(document.getElementById('bet-amount').value);
      if (isNaN(amt) || amt<1) return alert('Enter a valid amount (min $1)');
      if (amt > balance) return alert('Insufficient balance!');
      // Lightning
      lightningRound();
      // Animate
      spinRoulette(num, amt);
    }
    function showLightning() {
      let out = `<div><span class="lightning">âš¡ Lightning Numbers:</span> `;
      for (let i = 0; i < lightningNums.length; ++i) {
        out += `<span class="lightning">${lightningNums[i]} (${lightningPayouts[i]}x)</span> `;
      }
      out += "</div>";
      return out;
    }
    function spinRoulette(betNum, betAmt) {
      spinning = true;
      let spinsToDo = randInt(4, 7) * 37 + randInt(0,36); // random spins
      let targetIndex = wheelNumbers.indexOf(betNum);
      let resultIdx = randInt(0,36);
      let resultNum = wheelNumbers[resultIdx];
      let spinLen = spinsToDo + resultIdx;
      let duration = 2.5, frame = 0, frames = duration * 60;
      let startAngle = 0, endAngle = 2*Math.PI*(spinLen/37);
      function anim() {
        let t = frame/frames;
        let ease = (1 - Math.cos(Math.PI * t)) / 2; // cosine ease
        wheelAngle = startAngle + (endAngle - startAngle) * ease;
        drawWheel(wheelAngle, null, true);
        if (++frame < frames) requestAnimationFrame(anim);
        else {
          showResult(betNum, betAmt, resultNum);
          drawWheel(wheelAngle, resultNum, false);
          spinning = false;
        }
      }
      anim();
      resultBox.innerHTML = showLightning() + '<div style="padding-top:6px;">Spinning... ðŸŽ²</div>';
    }
    function showResult(betNum, betAmt, spinNum) {
      ++spins;
      updateStats();
      let msg = showLightning();
      let win = 0, payout = 0;
      let idx = lightningNums.indexOf(spinNum);
      if (spinNum === betNum) {
        if (idx !== -1) {
          // Lightning win!
          payout = lightningPayouts[idx];
          win = betAmt * payout;
          msg += `<div><b>ðŸŽ‰ Lightning Win! You hit <span class="lightning">${spinNum}</span> for ${payout}x!</b><br>Prize: <span class="highlight">$${win}</span></div>`;
        } else {
          win = betAmt * basePayout;
          msg += `<div><b>âœ¨ You hit <span class="highlight">${spinNum}</span>!<br>Prize: <span class="highlight">$${win}</span></b></div>`;
        }
        balance += win;
        if (win > bestWin) bestWin = win;
      } else {
        balance -= betAmt;
        msg += `<div style="color:#a57;">No win! The ball landed on <b>${spinNum}</b>.</div>`;
      }
      updateStats();
      if (balance <= 0) {
        msg += `<div style="color:#f33; font-weight:700;">Game over! Out of funds.</div>`;
        setTimeout(() => location.reload(), 2300);
      }
      resultBox.innerHTML = msg;
    }
  </script>
</body>
</html>
